<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="distance_8h" kind="file" language="C++">
    <compoundname>distance.h</compoundname>
    <includes refid="sensor_model_8h" local="yes">sensorModel.h</includes>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h</label>
        <link refid="distance_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sensorModel.h</label>
        <link refid="sensor_model_8h_source"/>
      </node>
      <node id="3">
        <label>utils.h</label>
        <link refid="utils_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="class_distance_sensor_model" prot="public">DistanceSensorModel</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="distance_8h_1a84aa7dd6e20d5e727bf77c0861138cef" prot="public" static="no" mutable="no">
        <type>const std::vector&lt; std::pair&lt; Eigen::Vector2f, Eigen::Vector2f &gt; &gt;</type>
        <definition>const std::vector&lt;std::pair&lt;Eigen::Vector2f, Eigen::Vector2f&gt; &gt; WALLS</definition>
        <argsstring></argsstring>
        <name>WALLS</name>
        <initializer>= {
	{{1.78308, 1.78308}, {1.78308, -1.78308}},
	{{1.78308, -1.78308}, {-1.78308, -1.78308}},
	{{-1.78308, -1.78308}, {-1.78308, 1.78308}},
	{{-1.78308, 1.78308}, {1.78308, 1.78308}},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" line="6" column="19" bodyfile="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" bodystart="6" bodyend="11"/>
      </memberdef>
      <memberdef kind="variable" id="distance_8h_1a89f1025eb2ea30c237d0d44cf00bea02" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float WALL_0_X</definition>
        <argsstring></argsstring>
        <name>WALL_0_X</name>
        <initializer>= 1.78308</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" line="13" column="17" bodyfile="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="distance_8h_1a2d559ab0f6fcbc56f8b15bb401ad14cd" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float WALL_1_Y</definition>
        <argsstring></argsstring>
        <name>WALL_1_Y</name>
        <initializer>= 1.78308</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" line="14" column="17" bodyfile="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="distance_8h_1a750c08447fe4a8d6ea0520a270036216" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float WALL_2_X</definition>
        <argsstring></argsstring>
        <name>WALL_2_X</name>
        <initializer>= -1.78308</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" line="15" column="17" bodyfile="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="distance_8h_1a54fadb50235e325add77f1941175c454" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float WALL_3_Y</definition>
        <argsstring></argsstring>
        <name>WALL_3_Y</name>
        <initializer>= -1.78308</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" line="16" column="17" bodyfile="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h" bodystart="16" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sensorModel.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;Eigen::Vector2f,<sp/>Eigen::Vector2f&gt;&gt;<sp/>WALLS<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>{{1.78308,<sp/>1.78308},<sp/>{1.78308,<sp/>-1.78308}},</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>{{1.78308,<sp/>-1.78308},<sp/>{-1.78308,<sp/>-1.78308}},</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{{-1.78308,<sp/>-1.78308},<sp/>{-1.78308,<sp/>1.78308}},</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{{-1.78308,<sp/>1.78308},<sp/>{1.78308,<sp/>1.78308}},</highlight></codeline>
<codeline lineno="11"><highlight class="normal">};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>WALL_0_X<sp/>=<sp/>1.78308;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>WALL_1_Y<sp/>=<sp/>1.78308;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>WALL_2_X<sp/>=<sp/>-1.78308;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>WALL_3_Y<sp/>=<sp/>-1.78308;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="class_distance_sensor_model" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_distance_sensor_model" kindref="compound">DistanceSensorModel</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_sensor_model" kindref="compound">SensorModel</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>sensorOffset;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>pros::Distance<sp/>distance;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>QLength<sp/>measured<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>QLength<sp/>std<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_distance_sensor_model" kindref="compound">DistanceSensorModel</ref>(Eigen::Vector3f<sp/>sensor_offset,<sp/>pros::Distance<sp/>distance)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>sensorOffset(std::move(sensor_offset)),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance(std::move(distance))<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_distance_sensor_model_1a1b691034552e9472807073bcface92f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_distance_sensor_model_1a1b691034552e9472807073bcface92f5" kindref="member">update</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>measuredMM<sp/>=<sp/>distance.get();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>=<sp/>measuredMM<sp/>==<sp/>9999<sp/>||<sp/>distance.get_object_size()<sp/>&lt;<sp/>70;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measured<sp/>=<sp/>measuredMM<sp/>*<sp/>millimetre;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std<sp/>=<sp/>0.20<sp/>*<sp/>measured<sp/>/<sp/>(distance.get_confidence()<sp/>/<sp/>64.0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_distance_sensor_model_1ad73b55b4fb45651fead2802942adf135" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>std::optional&lt;double&gt;<sp/><ref refid="class_distance_sensor_model_1ad73b55b4fb45651fead2802942adf135" kindref="member">p</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f&amp;<sp/>X)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exit)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>X.z()<sp/>+<sp/>sensorOffset.z();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector2f<sp/>x<sp/>=<sp/>X.head&lt;2&gt;()<sp/>+<sp/>Eigen::Rotation2Df(X.z())<sp/>*<sp/>sensorOffset.head&lt;2&gt;();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>predicted<sp/>=<sp/>50.0f;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>abs(std::remainder(0.0f,<sp/>angle));<sp/>theta<sp/>&lt;<sp/>M_PI_2)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicted<sp/>=<sp/>std::min((WALL_0_X<sp/>-<sp/>x.x())<sp/>/<sp/>cos(theta),<sp/>predicted);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>abs(std::remainder(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(M_PI_2),<sp/>angle));<sp/>theta<sp/>&lt;<sp/>M_PI_2)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicted<sp/>=<sp/>std::min((WALL_1_Y<sp/>-<sp/>x.y())<sp/>/<sp/>cos(theta),<sp/>predicted);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>abs(std::remainder(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(M_PI),<sp/>angle));<sp/>theta<sp/>&lt;<sp/>M_PI_2)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicted<sp/>=<sp/>std::min((x.x()<sp/>-<sp/>WALL_2_X)<sp/>/<sp/>cos(theta),<sp/>predicted);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>abs(std::remainder(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(M_3PI_4),<sp/>angle));<sp/>theta<sp/>&lt;<sp/>M_PI_2)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicted<sp/>=<sp/>std::min((x.y()<sp/>-<sp/>WALL_3_Y)<sp/>/<sp/>cos(theta),<sp/>predicted);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cheap_norm_pdf((predicted<sp/>-<sp/>measured.getValue())/std.getValue())<sp/>*<sp/>LOCO_CONFIG::DISTANCE_WEIGHT;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_distance_sensor_model" kindref="compound">~DistanceSensorModel</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/Users/alex/Documents/VEX/loco-lib/include/localization/distance.h"/>
  </compounddef>
</doxygen>
